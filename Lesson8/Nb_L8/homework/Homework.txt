1. Create method to check: if number < 0 print “Number < 0”, if number > 0 print “Number > 0” if number = 0 throw your own exception.
Arithmetic ex, Exception ex;

void method(int number) {
    if (number < 0) ...
    else if (number == 0) ...
}

2. Fix the method with try-catch to get the correct result of division:

public class Main {

    public static void main(String[] args) {
        System.out.println(divideByZero());
    }

    public static int divideByZero() {
        int a = 5;
        int b = 0;
        return a / b;
    }
}

3. Finish the program to handle all the possible exceptions:
public class Main {

    public static void main(String[] args) {
        int a = args.length;
        System.out.println(a);

        int b = 10 / a;
        int[] c = {1};
        System.out.println(c[1]);

    }

}

Print the cause of the exception to the console.

4. Fix the program to make it work:
public static void main(String[] args) {
        try {
            int a = 0;
            int b = 4 / a;
        } catch (Exception e) {
            e.printStackTrace();
        } catch (ArithmeticException e) {
            e.printStackTrace();
        }
}

5. Throw a NullPointerException from the method iCanThrowException();
Handle it in the main method.
public class Main {

    public static void main(String[] args) {
        iCanThrowException();
    }
    
    public static void iCanThrowException() {
        
    }

}

6. Write a program that will read numbers from the keyboard.
The code for reading numbers from the keyboard must be in the readData method.
The code inside the readData is wrapped in a try..catch.
If the user entered some text, instead of a number, this method should catch the exception and display all
previously entered numbers as a result. Each number should be printed from a new line preserving the order of the input.

7. In the Example class, implement a couple of equals / hashCode methods in accordance with the rules for implementing
these methods (check details with your favorite search engine).
Both the first and last strings should participate in the comparison using the equals method and the hashcode calculation.

public class Example {
    private final String first, last;

    public Example(String first, String last) {
        this.first = first;
        this.last = last;
    }

    @Override
    public boolean equals(Object o) {
        return false;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public static void main(String[] args) {
        Set<Example> s = new HashSet<>();
        s.add(new Example("Donald", "Duck"));
        System.out.println(s.contains(new Example("Donald", "Duck")));
    }
}